Proceso PruebaSintacticaRefinada
  Definir a, b, resultado Como Entero;
  Definir condicion Como Logico;
  // Valores predefinidos en el c√≥digo
  a <- 15;
  b <- 10;

  resultado <- a + b;
  condicion <- a > b;
  Escribir "Valores: a = ", a, ", b = ", b;
  Escribir "Resultado: ", resultado;
  Escribir "Condicion: ", condicion;
  Si condicion Entonces
    Escribir "A es mayor que B.";
  SiNo
    Escribir "A es menor que B.";
  FinSi
  Si a == b Entonces
    Escribir "A y B son iguales.";
  FinSi
FinProceso



DECLARE a INTEGER
DECLARE b INTEGER  
DECLARE resultado INTEGER
DECLARE condicion BOOLEAN

t1 = 15
a = t1
t2 = 10
b = t2

t3 = a + b
resultado = t3

t4 = a > b
condicion = t4

PRINT "Valores: a = ", a, ", b = ", b
PRINT "Resultado: ", resultado
PRINT "Condicion: ", condicion

IF condicion GOTO L1
GOTO L2

L1:
    PRINT "A es mayor que B."
    GOTO L3

L2:
    PRINT "A es menor que B."
    GOTO L3

L3:
    t5 = a == b
    IF t5 GOTO L4
    GOTO L5

L4:
    PRINT "A y B son iguales."
    GOTO L5

L5:
    END





DECLARE a INTEGER
DECLARE b INTEGER  
DECLARE resultado INTEGER
DECLARE condicion BOOLEAN

a = 15
b = 10

resultado = 25
condicion = TRUE

PRINT "Valores: a = ", a, ", b = ", b
PRINT "Resultado: ", resultado
PRINT "Condicion: ", condicion

PRINT "A es mayor que B."

END





section .data
    msg1 db "Valores: a = ", 0
    msg2 db ", b = ", 0
    msg3 db "Resultado: ", 0
    msg4 db "Condicion: ", 0
    msg5 db "A es mayor que B.", 10, 0
    msg6 db "true", 10, 0
    newline db 10, 0
    
    a dq 15
    b dq 10
    resultado dq 25
    condicion dq 1

section .bss
    buffer resb 32

section .text
    global _start

_start:
    mov rax, 1
    mov rdi, 1
    mov rsi, msg1
    mov rdx, 12
    syscall
    
    mov rax, [a]
    call print_number
    
    mov rax, 1
    mov rdi, 1
    mov rsi, msg2
    mov rdx, 6
    syscall
    
    mov rax, [b]
    call print_number
    
    mov rax, 1
    mov rdi, 1
    mov rsi, newline
    mov rdx, 1
    syscall
    
    mov rax, 1
    mov rdi, 1
    mov rsi, msg3
    mov rdx, 11
    syscall
    
    mov rax, [resultado]
    call print_number
    
    mov rax, 1
    mov rdi, 1
    mov rsi, newline
    mov rdx, 1
    syscall
    
    mov rax, 1
    mov rdi, 1
    mov rsi, msg4
    mov rdx, 11
    syscall
    
    mov rax, 1
    mov rdi, 1
    mov rsi, msg6
    mov rdx, 5
    syscall
    
    mov rax, 1
    mov rdi, 1
    mov rsi, msg5
    mov rdx, 19
    syscall
    
    mov rax, 60
    mov rdi, 0
    syscall

print_number:
    push rax
    push rbx
    push rcx
    push rdx
    push rsi
    push rdi
    
    mov rsi, buffer
    add rsi, 31
    mov byte [rsi], 0
    dec rsi
    
    mov rbx, 10
    
convert_loop:
    xor rdx, rdx
    div rbx
    add dl, '0'
    mov [rsi], dl
    dec rsi
    test rax, rax
    jnz convert_loop
    
    inc rsi
    mov rdx, buffer
    add rdx, 31
    sub rdx, rsi
    
    mov rax, 1
    mov rdi, 1
    syscall
    
    pop rdi
    pop rsi
    pop rdx
    pop rcx
    pop rbx
    pop rax
    ret

